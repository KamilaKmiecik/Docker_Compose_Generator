@model Docker_Compose_Generator.Models.ServiceDTO
@{
    var index = ViewData["index"];
}

<div id="service-container">
    <div class="service-item">
        <h4>Service</h4>
        <div class="form-group">
            <label asp-for="Name"></label>
            <input asp-for="Name" name="Services[@index].Name" class="form-control" />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Image"></label>
            <input asp-for="Image" name="Services[@index].Image" class="form-control" />
            <span asp-validation-for="Image" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label>Ports</label>
            <div id="ports-container">
            </div>
            <button type="button" id="add-port-btn" class="btn btn-secondary">Add Port</button>
        </div>

        <div class="form-group">
            <label>Volumes</label>
            <div id="volumes-container">
            </div>
            <button type="button" id="add-volume-btn" class="btn btn-secondary">Add Volume</button>
        </div>

        <div class="form-group">
            <label>Environment Variables</label>
            <div id="environment-container">
            </div>
            <button type="button" id="add-env-btn" class="btn btn-secondary">Add Environment Variable</button>
        </div>

        <div class="form-group">
            <label>Networks</label>
            <div id="networks-container">
            </div>
            <button type="button" id="add-network-btn" class="btn btn-secondary">Add Network</button>
        </div>

        <div class="form-group">
            <label>Restart Policy</label>
            <div class="form-group">
                <label>Condition</label>
                <input type="text" asp-for="RestartPolicy.Condition" name="Services[@index].RestartPolicy.Condition" class="form-control" />
                <span asp-validation-for="RestartPolicy.Condition" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label>Max Retries</label>
                <input type="number" asp-for="RestartPolicy.MaxRetries" name="Services[@index].RestartPolicy.MaxRetries" class="form-control" />
                <span asp-validation-for="RestartPolicy.MaxRetries" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label>Delay</label>
                <input type="text" asp-for="RestartPolicy.Delay" name="Services[@index].RestartPolicy.Delay" class="form-control" placeholder="e.g., 00:00:05" />
                <span asp-validation-for="RestartPolicy.Delay" class="text-danger"></span>
            </div>
        </div>

        <button type="button" class="btn btn-danger remove-service-btn">Remove Service</button>
    </div>
</div>

<script>
    document.getElementById('add-port-btn').addEventListener('click', function () {
        const portsContainer = document.getElementById('ports-container');
        const portIndex = portsContainer.children.length;

        const portDiv = document.createElement('div');
        portDiv.classList.add('port');

        const hostPortInput = document.createElement('input');
        hostPortInput.type = 'number';
        hostPortInput.name = `Services[@index].Ports[${portIndex}].HostPort`;
        hostPortInput.classList.add('form-control');
        hostPortInput.placeholder = 'Host Port';
        portDiv.appendChild(hostPortInput);

        const containerPortInput = document.createElement('input');
        containerPortInput.type = 'number';
        containerPortInput.name = `Services[@index].Ports[${portIndex}].ContainerPort`;
        containerPortInput.classList.add('form-control');
        containerPortInput.placeholder = 'Container Port';
        portDiv.appendChild(containerPortInput);

        const protocolInput = document.createElement('input');
        protocolInput.type = 'text';
        protocolInput.name = `Services[@index].Ports[${portIndex}].Protocol`;
        protocolInput.classList.add('form-control');
        protocolInput.placeholder = 'Protocol (default: tcp)';
        portDiv.appendChild(protocolInput);

        // Add remove button for port
        const removePortBtn = document.createElement('button');
        removePortBtn.type = 'button';
        removePortBtn.classList.add('btn', 'btn-danger', 'remove-port-btn');
        removePortBtn.innerText = 'Remove Port';
        portDiv.appendChild(removePortBtn);

        portsContainer.appendChild(portDiv);

        removePortBtn.addEventListener('click', function () {
            portsContainer.removeChild(portDiv);
        });
    });

    document.getElementById('add-volume-btn').addEventListener('click', function () {
        const volumesContainer = document.getElementById('volumes-container');
