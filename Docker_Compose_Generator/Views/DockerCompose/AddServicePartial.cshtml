@model Docker_Compose_Generator.Models.ServiceDto

<div id="service-container">
    <div class="service-item">
        <h4>Service</h4>
        <div class="form-group">
            <label asp-for="Name"></label>
            <input asp-for="Name" class="form-control" />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Image"></label>
            <input asp-for="Image" class="form-control" />
            <span asp-validation-for="Image" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label>Ports</label>
            <div id="ports-container">
            </div>
            <button type="button" id="add-port-btn" class="btn btn-secondary">Add Port</button>
        </div>

        <div class="form-group">
            <label>Volumes</label>
            <div id="volumes-container">
            </div>
            <button type="button" id="add-volume-btn" class="btn btn-secondary">Add Volume</button>
        </div>

        <div class="form-group">
            <label>Environment Variables</label>
            <div id="environment-container">
            </div>
            <button type="button" id="add-env-btn" class="btn btn-secondary">Add Environment Variable</button>
        </div>

        <div class="form-group">
            <label>Networks</label>
            <div id="networks-container">
            </div>
            <button type="button" id="add-network-btn" class="btn btn-secondary">Add Network</button>
        </div>

        <div class="form-group">
            <label>Restart Policy</label>
            <div class="form-group">
                <label>Condition</label>
                <input type="text" asp-for="RestartPolicy.Condition" class="form-control" />
                <span asp-validation-for="RestartPolicy.Condition" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label>Max Retries</label>
                <input type="number" asp-for="RestartPolicy.MaxRetries" class="form-control" />
                <span asp-validation-for="RestartPolicy.MaxRetries" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label>Delay</label>
                <input type="text" asp-for="RestartPolicy.Delay" class="form-control" placeholder="e.g., 00:00:05" />
                <span asp-validation-for="RestartPolicy.Delay" class="text-danger"></span>
            </div>
        </div>

        <button type="button" class="btn btn-danger remove-service-btn">Remove Service</button>
    </div>
</div>


<script src="~/js/site.js"></script>

<script>
    document.getElementById('add-port-btn').addEventListener('click', function () {
        const portsContainer = document.getElementById('ports-container');

        const portDiv = document.createElement('div');
        portDiv.classList.add('port');

        const hostPortInput = document.createElement('input');
        hostPortInput.type = 'number';
        hostPortInput.name = "Ports[].HostPort";
        hostPortInput.classList.add('form-control');
        hostPortInput.placeholder = 'Host Port';
        portDiv.appendChild(hostPortInput);

        const containerPortInput = document.createElement('input');
        containerPortInput.type = 'number';
        containerPortInput.name = "Ports[].ContainerPort";
        containerPortInput.classList.add('form-control');
        containerPortInput.placeholder = 'Container Port';
        portDiv.appendChild(containerPortInput);

        const protocolInput = document.createElement('input');
        protocolInput.type = 'text';
        protocolInput.name = "Ports[].Protocol";
        protocolInput.classList.add('form-control');
        protocolInput.placeholder = 'Protocol (default: tcp)';
        portDiv.appendChild(protocolInput);

        // Add remove button for port
        const removePortBtn = document.createElement('button');
        removePortBtn.type = 'button';
        removePortBtn.classList.add('btn', 'btn-danger', 'remove-port-btn');
        removePortBtn.innerText = 'Remove Port';
        portDiv.appendChild(removePortBtn);

        portsContainer.appendChild(portDiv);

        removePortBtn.addEventListener('click', function () {
            portsContainer.removeChild(portDiv);
        });
    });

    document.getElementById('add-volume-btn').addEventListener('click', function () {
        const volumesContainer = document.getElementById('volumes-container');

        const volumeDiv = document.createElement('div');
        volumeDiv.classList.add('volume');

        const sourceInput = document.createElement('input');
        sourceInput.type = 'text';
        sourceInput.name = "Volumes[].Source";
        sourceInput.classList.add('form-control');
        sourceInput.placeholder = 'Source';
        volumeDiv.appendChild(sourceInput);

        const targetInput = document.createElement('input');
        targetInput.type = 'text';
        targetInput.name = "Volumes[].Target";
        targetInput.classList.add('form-control');
        targetInput.placeholder = 'Target';
        volumeDiv.appendChild(targetInput);

        const accessModeInput = document.createElement('input');
        accessModeInput.type = 'text';
        accessModeInput.name = "Volumes[].AccessMode";
        accessModeInput.classList.add('form-control');
        accessModeInput.placeholder = 'Access Mode (default: rw)';
        volumeDiv.appendChild(accessModeInput);

        const removeVolumeBtn = document.createElement('button');
        removeVolumeBtn.type = 'button';
        removeVolumeBtn.classList.add('btn', 'btn-danger', 'remove-volume-btn');
        removeVolumeBtn.innerText = 'Remove Volume';
        volumeDiv.appendChild(removeVolumeBtn);

        volumesContainer.appendChild(volumeDiv);

        removeVolumeBtn.addEventListener('click', function () {
            volumesContainer.removeChild(volumeDiv);
        });
    });

    document.getElementById('add-env-btn').addEventListener('click', function () {
        const environmentContainer = document.getElementById('environment-container');

        const envDiv = document.createElement('div');
        envDiv.classList.add('environment');

        const keyInput = document.createElement('input');
        keyInput.type = 'text';
        keyInput.name = "Environment[].Key";
        keyInput.classList.add('form-control');
        keyInput.placeholder = 'Key';
        envDiv.appendChild(keyInput);

        const valueInput = document.createElement('input');
        valueInput.type = 'text';
        valueInput.name = "Environment[].Value";
        valueInput.classList.add('form-control');
        valueInput.placeholder = 'Value';
        envDiv.appendChild(valueInput);

        const removeEnvBtn = document.createElement('button');
        removeEnvBtn.type = 'button';
        removeEnvBtn.classList.add('btn', 'btn-danger', 'remove-env-btn');
        removeEnvBtn.innerText = 'Remove Environment Variable';
        envDiv.appendChild(removeEnvBtn);

        environmentContainer.appendChild(envDiv);

        removeEnvBtn.addEventListener('click', function () {
            environmentContainer.removeChild(envDiv);
        });
    });

    document.getElementById('add-network-btn').addEventListener('click', function () {
        const networksContainer = document.getElementById('networks-container');

        const networkDiv = document.createElement('div');
        networkDiv.classList.add('network');

        const nameInput = document.createElement('input');
        nameInput.type = 'text';
        nameInput.name = "Networks[].Name";
        nameInput.classList.add('form-control');
        nameInput.placeholder = 'Network Name';
        networkDiv.appendChild(nameInput);

        const aliasInput = document.createElement('input');
        aliasInput.type = 'text';
        aliasInput.name = "Networks[].Alias";
        aliasInput.classList.add('form-control');
        aliasInput.placeholder = 'Alias';
        networkDiv.appendChild(aliasInput);

        const removeNetworkBtn = document.createElement('button');
        removeNetworkBtn.type = 'button';
        removeNetworkBtn.classList.add('btn', 'btn-danger', 'remove-network-btn');
        removeNetworkBtn.innerText = 'Remove Network';
        networkDiv.appendChild(removeNetworkBtn);

        networksContainer.appendChild(networkDiv);

        removeNetworkBtn.addEventListener('click', function () {
            networksContainer.removeChild(networkDiv);
        });
    });

    document.querySelectorAll('.remove-service-btn').forEach(btn => {
        btn.addEventListener('click', function () {
            const serviceItem = btn.closest('.service-item');
            serviceItem.parentNode.removeChild(serviceItem);
        });
    });
</script>
